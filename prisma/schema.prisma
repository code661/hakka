// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  username         String            @unique
  email            String?           @unique
  avatar           String?
  bio              String?
  github           String?
  twitter          String?
  website          String?
  githubUserId     String?           @unique
  topics           Topic[]
  comments         Comment[]
  userTopicLikes   UserTopicLike[]
  userCommentLikes UserCommentLike[]
  notifications    Notification[]

  @@map("users")
}

model Topic {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  title          String
  content        String
  url            String?
  author         User            @relation(fields: [authorId], references: [id])
  authorId       Int
  comments       Comment[]
  userTopicLikes UserTopicLike[]
  lastComment    Comment?        @relation(name: "topic_last_comment", fields: [lastCommentId], references: [id])
  lastCommentId  Int?
  // Hide the topic from being listed (but still exists and visible)
  hidden         Boolean?

  @@map("topics")
}

model Comment {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  content          String
  topic            Topic             @relation(fields: [topicId], references: [id])
  topicId          Int
  author           User              @relation(fields: [authorId], references: [id])
  authorId         Int
  parent           Comment?          @relation("CommentToComment", fields: [parentId], references: [id])
  parentId         Int?
  children         Comment[]         @relation("CommentToComment")
  userCommentLikes UserCommentLike[]
  lastCommentOf    Topic?            @relation("topic_last_comment")

  @@map("comments")
}

model UserTopicLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])
  userId    Int
  topicId   Int

  @@map("user_topic_likes")
}

model UserCommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int

  @@map("user_comment_likes")
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isRead    Boolean?
  data      Json

  @@map("notifications")
}
